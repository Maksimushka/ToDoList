{"version":3,"sources":["component/Todolist/Todolist.module.css","redux/reducers/authReducer/auth-actions.ts","api/todoAPI.ts","utils/error-utils.ts","redux/reducers/appReducer/app-actions.ts","component/ErrorSnackbar/ErrorSnackBar.tsx","api/tasksAPI.ts","component/AddItemForm/AddItemForm.tsx","component/EditableSpan/EditableSpan.tsx","redux/reducers/tasksReducer/tasks-actions.ts","redux/reducers/todoListReducer/todolist-actions.ts","redux/reducers/tasksReducer/tasks-thunk.ts","component/Todolist/Task/Task.tsx","component/Todolist/Tasks/Tasks.tsx","component/Todolist/Todolist.tsx","redux/reducers/todoListReducer/todolist-thunk.ts","component/TodoListsList/TodoListsList.tsx","component/Login/Login.tsx","App.tsx","serviceWorker.ts","redux/reducers/tasksReducer/tasks-reducer.ts","redux/reducers/todoListReducer/todolists-reducer.ts","redux/reducers/appReducer/app-reducer.ts","redux/reducers/authReducer/auth-reducer.ts","redux/store.ts","index.tsx"],"names":["module","exports","authActionsType","instance","axios","create","baseURL","withCredentials","headers","todoListAPI","todoId","title","put","delete","post","get","authAPI","data","handleServerAppError","dispatch","messages","length","setErrorAC","setLoadingStatusAC","handleServerNetworkError","error","message","appActionsType","setIsLoggedAC","value","type","setIsLogged","status","setLoadingStatus","setError","Alert","props","elevation","variant","TaskStatus","TaskPriority","ErrorSnackbar","useSelector","state","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AddItemForm","React","memo","addItem","disabled","useState","setTitle","onAddItem","trim","className","s","input","TextField","label","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","editSpan","inputTask","autoFocus","onBlur","onDoubleClick","tasksAPI","taskId","model","updateTaskAC","id","setTasksAC","tasks","setTaskObjectStatusAC","changeTodolistTitleAC","setTodoListObjectStatusAC","updateTaskTC","getState","a","allTasks","task","find","el","console","warn","apiModel","description","priority","startDate","deadline","resultCode","Task","taskObjectStatus","removeTask","changeStatus","changeTaskTitle","onChangeTaskTitle","useCallback","taskDone","Checkbox","newStatus","New","Completed","checked","Delete","Tasks","todolistId","todoID","map","objectStatus","TodoList","filter","useEffect","items","addTask","item","addTaskTC","removeTodoList","changeFilter","changeTodolistFilterAC","changeTodolistTitle","updateTodoListTC","onChangeFilter","addTaskHandler","changeTodolistTitleHandler","tasksForTodolist","t","typeTasks","Button","TodoListsList","demo","todoLists","isLogged","auth","addTodolist","todoList","addTodoListTC","Grid","container","style","padding","tl","marginRight","marginBottom","Paper","to","Login","formik","useFormik","initialValues","email","password","rememberMe","validationSchema","Yup","required","min","onSubmit","values","setLoginTC","resetForm","alignItems","justify","FormControl","FormLabel","href","target","handleSubmit","FormGroup","margin","getFieldProps","touched","Boolean","errors","FormControlLabel","control","App","isInitialized","setIsInitialized","AppBar","position","Toolbar","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","width","textAlign","CircularProgress","window","location","hostname","match","initialState","reducers","combineReducers","action","copyState","todoListId","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7b7c835e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"typeTasks\":\"Todolist_typeTasks__3edXx\",\"tasks\":\"Todolist_tasks__1q6Ld\",\"taskDone\":\"Todolist_taskDone__3x4fw\",\"input\":\"Todolist_input__27hUE\",\"filter\":\"Todolist_filter__2Ou0P\",\"inputTask\":\"Todolist_inputTask__1zpOo\",\"spanTitle\":\"Todolist_spanTitle__2diLC\"};","import {authAPI, LoginParamsType} from '../../../api/todoAPI';\r\nimport {Dispatch} from 'redux';\r\nimport {setLoadingStatusAC} from '../appReducer/app-actions';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../utils/error-utils';\r\n\r\n// TYPES\r\nexport enum authActionsType {\r\n    setIsLogged = 'AUTH/SET_LOADING_STATUS',\r\n}\r\nexport type authReducerActionsType = SetIsLoggedAType\r\nexport type SetIsLoggedAType = ReturnType<typeof setIsLoggedAC>\r\n\r\n// ACTION CREATORS\r\nexport const setIsLoggedAC = (value: boolean) => ({\r\n    type: authActionsType.setIsLogged,\r\n    value\r\n} as const)\r\n\r\n// THUNK CREATORS\r\nexport const setLoginTC = (values: LoginParamsType) => async (dispatch: Dispatch) => {\r\n    dispatch(setLoadingStatusAC('loading'))\r\n    try {\r\n        let {data} = await authAPI.login(values)\r\n        if (data.resultCode === 0) {\r\n            dispatch(setIsLoggedAC(true))\r\n            dispatch(setLoadingStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(data, dispatch)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\nexport const setLogOutTC = () => async (dispatch: Dispatch) => {\r\n    dispatch(setLoadingStatusAC('loading'))\r\n    try {\r\n        let {data} = await authAPI.logOut()\r\n        if (data.resultCode === 0) {\r\n            dispatch(setIsLoggedAC(false))\r\n            dispatch(setLoadingStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(data, dispatch)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}","import axios from \"axios\"\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[],\r\n    data: D\r\n}\r\n\r\nexport type TodoListType = {\r\n    title: string\r\n    id: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nconst setting = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '0c7f7a4d-ffbe-4143-a04f-3a08c1c80984'\r\n    }\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...setting\r\n})\r\n\r\nexport const todoListAPI = {\r\n    updateTodoList (todoId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todoId}`, {title})\r\n    },\r\n    deleteTodoList (todoId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoId}`)\r\n    },\r\n    createTodoList (title: string) {\r\n        return instance.post<ResponseType<{item: TodoListType}>>('todo-lists', {title})\r\n    },\r\n    getTodoLists () {\r\n        return instance.get<TodoListType[]>('todo-lists')\r\n    }\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: string}>>('auth/login', data)\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, email:string, login:string}>>('auth/me')\r\n    }\r\n}","import { Dispatch } from 'redux';\r\nimport {ResponseType} from '../api/todoAPI'\r\nimport {\r\n    setErrorAC,\r\n    SetErrorAType,\r\n    setLoadingStatusAC,\r\n    SetLoadingStatusAType\r\n} from '../redux/reducers/appReducer/app-actions';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setLoadingStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setErrorAC(error.message))\r\n    dispatch(setLoadingStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetErrorAType | SetLoadingStatusAType>","import {RequestStatusType} from './app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {authAPI} from '../../../api/todoAPI';\r\nimport {setIsLoggedAC} from '../authReducer/auth-actions';\r\nimport {handleServerAppError} from '../../../utils/error-utils';\r\n\r\nexport enum appActionsType {\r\n    setLoadingStatus = 'APP/SET_LOADING_STATUS',\r\n    setError = 'APP/SET_ERROR',\r\n    setIsInitialized = 'APP/SET_IS_INITIALIZED'\r\n}\r\n\r\nexport type AppReducerActionsType = SetLoadingStatusAType | SetErrorAType | SetIsInitializedAType\r\n\r\nexport type SetErrorAType = ReturnType<typeof setErrorAC>\r\nexport type SetLoadingStatusAType = ReturnType<typeof setLoadingStatusAC>\r\nexport type SetIsInitializedAType = ReturnType<typeof setIsInitializedAC>\r\n\r\nexport const setLoadingStatusAC = (status: RequestStatusType) => ({\r\n    type: appActionsType.setLoadingStatus,\r\n    status\r\n} as const)\r\nexport const setErrorAC = (error: string | null) => ({\r\n    type: appActionsType.setError,\r\n    error\r\n} as const)\r\nexport const setIsInitializedAC = (value: boolean) => ({\r\n    type: appActionsType.setIsInitialized,\r\n    value\r\n} as const)\r\n\r\nexport const initializeAppTC = () => async (dispatch: Dispatch) => {\r\n    let {data} = await authAPI.me()\r\n    dispatch(setIsInitializedAC(true))\r\n    if (data.resultCode === 0) {\r\n        dispatch(setIsLoggedAC(true))\r\n    } else {\r\n        handleServerAppError(data, dispatch)\r\n    }\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStoreType} from '../../redux/store';\r\nimport {AppReducerStateType} from '../../redux/reducers/appReducer/app-reducer';\r\nimport {setErrorAC} from '../../redux/reducers/appReducer/app-actions';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst ErrorSnackbar = () => {\r\n    const {error} = useSelector<RootStoreType, AppReducerStateType>(state => state.app)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setErrorAC(null))\r\n    };\r\n\r\n    return (\r\n            <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n    );\r\n}\r\n\r\nexport default ErrorSnackbar\r\n","import axios from 'axios';\r\n\r\nconst setting = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '0c7f7a4d-ffbe-4143-a04f-3a08c1c80984'\r\n    }\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatus\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype UpdateTaskModelType = {\r\n    description: string\r\n    title: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport enum TaskStatus {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriority {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\ntype GetTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: null\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists',\r\n    ...setting\r\n})\r\n\r\nexport const tasksAPI = {\r\n    getTasks(todoId: string) {\r\n        return instance.get<GetTasksType>(`${todoId}/tasks`)\r\n    },\r\n    createTask(todoId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`${todoId}/tasks`, {title})\r\n    },\r\n    updateTask(todoId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<{ item: TaskType }>>(`${todoId}/tasks/${taskId}`, {...model})\r\n    },\r\n    deleteTask(todoId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`${todoId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\n","import s from \"../Todolist/Todolist.module.css\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(({addItem, disabled}: AddItemFormType) => {\r\n\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onAddItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title)\r\n            setTitle(\"\")\r\n            setError(null)\r\n        } else {\r\n            setError(\"Please, enter your task!\")\r\n            setTitle(\"\")\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            onAddItem()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.input}>\r\n            <TextField\r\n                value={title}\r\n                label={'Type value'}\r\n                variant={'outlined'}\r\n                onChange={ onChangeHandler }\r\n                onKeyPress={ onKeyPressHandler }\r\n                error={ !!error }\r\n                helperText={ error }\r\n            />\r\n            <IconButton disabled={disabled} color='primary'  onClick={ onAddItem }>\r\n                <AddBox />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from 'react';\r\nimport s from \"./../Todolist/Todolist.module.css\"\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanType = {\r\n    value: string\r\n    onChange: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nconst EditableSpan = React.memo((props: EditableSpanType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.value)\r\n    const editInput = () => {\r\n        if (!props.disabled) {\r\n            setEditMode(true)\r\n            setTitle(props.value)\r\n        }\r\n    }\r\n    const editSpan = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return editMode\r\n                ? <TextField\r\n                        variant={'outlined'}\r\n                        value={ title }\r\n                        className={s.inputTask}\r\n                        onKeyPress={ (e) => e.charCode === 13 && editSpan() }\r\n                        autoFocus\r\n                        onChange={ changeTitle }\r\n                        onBlur={ editSpan }\r\n                    />\r\n                : <span className={s.title} onDoubleClick={ editInput } >{ props.value }</span>\r\n})\r\n\r\nexport default EditableSpan;","import {TaskPriority, TaskStatus, TaskType} from '../../../api/tasksAPI';\r\nimport {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodoListsActionType\r\n} from '../todoListReducer/todolist-actions';\r\nimport {RequestStatusType} from '../appReducer/app-reducer';\r\n\r\n// TYPES\r\nexport type TasksActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | UpdateTaskAType | AddTodolistActionType | RemoveTodolistActionType\r\n    | SetTodoListsActionType | SetTasksActionType | SetTaskObjectStatusActionType\r\n\r\nexport type RemoveTaskActionType = ReturnType<typeof removeTaskAC>\r\nexport type AddTaskActionType = ReturnType<typeof addTaskAC>\r\nexport type UpdateTaskAType = ReturnType<typeof updateTaskAC>\r\nexport type SetTasksActionType = ReturnType<typeof setTasksAC>\r\nexport type SetTaskObjectStatusActionType = ReturnType<typeof setTaskObjectStatusAC>\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatus\r\n    priority?: TaskPriority\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n// ACTION CREATORS\r\nexport const removeTaskAC = (todoID: string, id: string,) => ({\r\n    type: 'REMOVE_TASK', id, todoID\r\n} as const)\r\nexport const addTaskAC = (task: TaskType) => ({\r\n    type: 'ADD_TASK', task\r\n} as const)\r\nexport const updateTaskAC = (todoId: string, id: string, model: UpdateDomainTaskModelType) => ({\r\n    type: 'UPDATE_TASK', todoId, id, model\r\n} as const)\r\nexport const setTasksAC = (todoId: string, tasks: TaskType[]) => ({\r\n    type: 'SET_TASKS', todoId, tasks\r\n} as const)\r\nexport const setTaskObjectStatusAC = (todoId: string, taskId: string, status: RequestStatusType) => ({\r\n    type: 'SET_TASK_OBJECT_STATUS', todoId, status, taskId\r\n} as const)","import {FilterValuesType} from './todolists-reducer';\r\nimport {TodoListType} from '../../../api/todoAPI';\r\nimport {RequestStatusType} from '../appReducer/app-reducer';\r\n\r\nexport type TodoListsActionsType = RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof setTodoListObjectStatusAC>\r\n    | SetTodoListsActionType\r\n\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodoListsActionType = ReturnType<typeof setTodoListsAC>\r\n\r\n// ACTION CREATORS\r\nexport const removeTodolistAC = (id: string) => ({\r\n    type: 'REMOVE_TODOLIST',\r\n    id\r\n} as const )\r\nexport const addTodolistAC = (todoList: TodoListType) => ({\r\n    type: 'ADD_TODOLIST',\r\n    todoList\r\n} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'Change_TODOLIST_TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE_TODOLIST_FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodoListsAC = (todoLists: TodoListType[]) => ({\r\n    type: 'SET_TODOLISTS',\r\n    todoLists\r\n} as const)\r\nexport const setTodoListObjectStatusAC = (todoId: string, status: RequestStatusType) => ({\r\n    type: 'SET_TODOLIST_OBJECT_STATUS',\r\n    todoId,\r\n    status\r\n} as const)","import {Dispatch} from 'redux';\r\nimport {tasksAPI} from '../../../api/tasksAPI';\r\nimport {\r\n    addTaskAC,\r\n    removeTaskAC,\r\n    setTaskObjectStatusAC,\r\n    setTasksAC,\r\n    UpdateDomainTaskModelType,\r\n    updateTaskAC\r\n} from './tasks-actions';\r\nimport {RootStoreType} from '../../store';\r\nimport {setLoadingStatusAC} from '../appReducer/app-actions';\r\nimport {setTodoListObjectStatusAC} from '../todoListReducer/todolist-actions';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../utils/error-utils';\r\n\r\nexport const getTasksTC = (todoId: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setLoadingStatusAC('loading'))\r\n    dispatch(setTodoListObjectStatusAC(todoId, 'loading'))\r\n    try {\r\n        let {data} = await tasksAPI.getTasks(todoId)\r\n        dispatch(setTasksAC(todoId, data.items))\r\n        dispatch(setLoadingStatusAC('succeeded'))\r\n        dispatch(setTodoListObjectStatusAC(todoId, 'succeeded'))\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\nexport const updateTaskTC = (todoId: string, taskId: string, model: UpdateDomainTaskModelType) =>\r\n    async (dispatch: Dispatch, getState: () => RootStoreType) => {\r\n        const allTasks = getState().tasks[todoId]\r\n        const task = allTasks.find(el => el.id === taskId);\r\n        if (!task) {\r\n            console.warn('Task not found!')\r\n            return\r\n        }\r\n\r\n        const apiModel = {\r\n            description: task.description,\r\n            title: task.title,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...model\r\n        }\r\n        dispatch(setLoadingStatusAC('loading'))\r\n        dispatch(setTaskObjectStatusAC(todoId, taskId, 'loading'))\r\n        try {\r\n            let {data} = await tasksAPI.updateTask(todoId, taskId, apiModel)\r\n            if (data.resultCode === 0) {\r\n                dispatch(updateTaskAC(todoId, taskId, apiModel))\r\n                dispatch(setLoadingStatusAC('succeeded'))\r\n                dispatch(setTaskObjectStatusAC(todoId, taskId, 'succeeded'))\r\n            } else {\r\n                handleServerAppError(data, dispatch)\r\n                dispatch(setTaskObjectStatusAC(todoId, taskId, 'failed'))\r\n            }\r\n        } catch (e) {\r\n            handleServerNetworkError(e, dispatch)\r\n        }\r\n    }\r\nexport const deleteTaskTC = (todoId: string, taskId: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setLoadingStatusAC('loading'))\r\n    dispatch(setTaskObjectStatusAC(todoId, taskId, 'loading'))\r\n    try {\r\n        let {data} = await tasksAPI.deleteTask(todoId, taskId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(removeTaskAC(todoId, taskId))\r\n            dispatch(setLoadingStatusAC('succeeded'))\r\n            dispatch(setTaskObjectStatusAC(todoId, taskId, 'succeeded'))\r\n        } else {\r\n            handleServerAppError(data, dispatch)\r\n            dispatch(setTaskObjectStatusAC(todoId, taskId, 'failed'))\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\nexport const addTaskTC = (todoId: string, title: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setTodoListObjectStatusAC(todoId, 'loading'))\r\n    dispatch(setLoadingStatusAC('loading'))\r\n    try {\r\n        let {data} = await tasksAPI.createTask(todoId, title)\r\n        if (data.resultCode === 0) {\r\n            dispatch(addTaskAC(data.data.item))\r\n            dispatch(setLoadingStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(data, dispatch)\r\n        }\r\n        dispatch(setTodoListObjectStatusAC(todoId, 'succeeded'))\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n\r\n}","import React, {useCallback} from 'react';\r\nimport s from '../Todolist.module.css';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport EditableSpan from '../../EditableSpan/EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatus} from '../../../api/tasksAPI';\r\nimport {RequestStatusType} from '../../../redux/reducers/appReducer/app-reducer';\r\n\r\nexport type TaskPropsType = {\r\n    taskId: string\r\n    todoId: string\r\n    title: string\r\n    status: TaskStatus\r\n    removeTask: (id: string, todolistID: string) => void\r\n    changeStatus: (taskId: string, status: TaskStatus, todolistID: string) => void\r\n    changeTaskTitle: (title: string, taskId: string, todolistID: string) => void\r\n    taskObjectStatus: RequestStatusType\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {taskId, todoId, title, status, taskObjectStatus,\r\n        removeTask, changeStatus, changeTaskTitle} = props\r\n\r\n    const onRemoveHandler = () => removeTask(taskId, todoId)\r\n    const onChangeStatusHandler = () => {\r\n        let newStatus = status ? TaskStatus.New : TaskStatus.Completed\r\n        changeStatus(taskId, newStatus, todoId)\r\n    }\r\n    const onChangeTaskTitle = useCallback((title: string) => {\r\n        changeTaskTitle(title, taskId, todoId)\r\n    }, [taskId, todoId, changeTaskTitle])\r\n\r\n\r\n    return (\r\n        <div className={ !!status ? s.taskDone : s.task}>\r\n            <Checkbox\r\n                disabled={taskObjectStatus === 'loading'}\r\n                color={'primary'}\r\n                onChange={ onChangeStatusHandler }\r\n                checked={ !!status }\r\n            />\r\n            <EditableSpan disabled={taskObjectStatus === 'loading'} value={ title } onChange={ onChangeTaskTitle } />\r\n            <IconButton disabled={taskObjectStatus === 'loading'} onClick={ onRemoveHandler } >\r\n                <Delete />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback} from 'react';\r\nimport {Task} from '../Task/Task';\r\nimport {deleteTaskTC, updateTaskTC,} from '../../../redux/reducers/tasksReducer/tasks-thunk';\r\nimport {TaskStatus, TaskType} from '../../../api/tasksAPI';\r\nimport {useDispatch} from 'react-redux';\r\nimport {ObjectStatusType} from '../../../redux/reducers/tasksReducer/tasks-reducer';\r\n\r\ntype TasksPropsType = {\r\n    tasks: ObjectStatusType[]\r\n    todoId: string\r\n}\r\n\r\nconst Tasks: React.FC<TasksPropsType> = React.memo((props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n        dispatch(deleteTaskTC(todolistId, id))\r\n    }, [dispatch])\r\n    const changeStatus = useCallback((id: string, status: TaskStatus, todolistId: string) => {\r\n        dispatch(updateTaskTC(todolistId, id, {status}))\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((title: string, id: string, todolistId: string) => {\r\n        dispatch(updateTaskTC(todolistId, id, {title}))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.tasks.map(el => {\r\n                    return <Task\r\n                        taskObjectStatus={el.objectStatus}\r\n                        taskId={el.id}\r\n                        title={el.title}\r\n                        status={el.status}\r\n                        todoId={props.todoId}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeStatus={changeStatus}\r\n                        removeTask={removeTask}\r\n                        key={el.id}/>\r\n                })\r\n            }\r\n        </>\r\n    );\r\n})\r\n\r\nexport default Tasks;","import React, {useCallback, useEffect} from 'react';\r\nimport s from './Todolist.module.css'\r\nimport {AddItemForm} from '../AddItemForm/AddItemForm';\r\nimport EditableSpan from '../EditableSpan/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TaskStatus} from '../../api/tasksAPI';\r\nimport {FilterValuesType} from '../../redux/reducers/todoListReducer/todolists-reducer';\r\nimport {addTaskTC, getTasksTC,} from '../../redux/reducers/tasksReducer/tasks-thunk';\r\nimport {useDispatch} from 'react-redux';\r\nimport {deleteTodoListTC, updateTodoListTC} from '../../redux/reducers/todoListReducer/todolist-thunk';\r\nimport {changeTodolistFilterAC} from '../../redux/reducers/todoListReducer/todolist-actions';\r\nimport Tasks from './Tasks/Tasks';\r\nimport {RequestStatusType} from '../../redux/reducers/appReducer/app-reducer';\r\nimport {ObjectStatusType} from '../../redux/reducers/tasksReducer/tasks-reducer';\r\n\r\ntype PropsType = {\r\n    objectStatus: RequestStatusType\r\n    title: string\r\n    id: string\r\n    tasks: ObjectStatusType[]\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const TodoList = React.memo((props: PropsType) => {\r\n    const {tasks, title, id, filter, objectStatus} = props\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(id))\r\n    }, [dispatch, id])\r\n\r\n    const addTask = useCallback((title: string, todolistId: string) => {\r\n        dispatch(addTaskTC(todolistId, title))\r\n    }, [dispatch])\r\n    const removeTodoList = useCallback((id: string) => {\r\n        dispatch(deleteTodoListTC(id))\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, value))\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((title: string, id: string) => {\r\n        dispatch(updateTodoListTC(id, title))\r\n    }, [dispatch])\r\n\r\n    const onChangeFilter = useCallback((filter: FilterValuesType) => {\r\n        changeFilter(filter, id)\r\n    }, [changeFilter, id])\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, id)\r\n    }, [addTask, id])\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle(title, id)\r\n    }, [changeTodolistTitle, id])\r\n\r\n    let tasksForTodolist = tasks;\r\n    if (filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatus.New);\r\n    }\r\n    if (filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatus.Completed);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3 className={s.typeTasks}>\r\n                <EditableSpan disabled={objectStatus === 'loading'} onChange={changeTodolistTitleHandler} value={title}/>\r\n                <IconButton disabled={objectStatus === 'loading'} onClick={ () => removeTodoList(id) }>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm disabled={objectStatus === 'loading'} addItem={addTaskHandler}/>\r\n            <div className={s.tasks}>\r\n                <Tasks todoId={id} tasks={tasksForTodolist}/>\r\n            </div>\r\n            <div className={s.filter}>\r\n                <Button variant={filter === 'all' ? 'outlined' : 'text'}\r\n                        onClick={() => onChangeFilter('all')}>All</Button>\r\n                <Button variant={filter === 'active' ? 'outlined' : 'text'}\r\n                        color={'primary'}\r\n                        onClick={() => onChangeFilter('active')}>Active</Button>\r\n                <Button variant={filter === 'completed' ? 'outlined' : 'text'}\r\n                        color={'secondary'}\r\n                        onClick={() => onChangeFilter('completed')}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    setTodoListObjectStatusAC,\r\n    setTodoListsAC\r\n} from './todolist-actions';\r\nimport {todoListAPI} from '../../../api/todoAPI';\r\nimport {setLoadingStatusAC} from '../appReducer/app-actions';\r\nimport {handleServerAppError, handleServerNetworkError} from '../../../utils/error-utils';\r\n\r\nexport const getTodoListsTC = () => async (dispatch: Dispatch) => {\r\n    dispatch(setLoadingStatusAC('loading'))\r\n    try {\r\n        let {data} = await todoListAPI.getTodoLists()\r\n        dispatch(setTodoListsAC(data))\r\n        dispatch(setLoadingStatusAC('succeeded'))\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n\r\n}\r\nexport const deleteTodoListTC = (todoId: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setLoadingStatusAC('loading'))\r\n    dispatch(setTodoListObjectStatusAC(todoId, 'loading'))\r\n    try {\r\n        let {data} = await todoListAPI.deleteTodoList(todoId)\r\n        if (data.resultCode === 0) {\r\n            dispatch(removeTodolistAC(todoId))\r\n            dispatch(setLoadingStatusAC('succeeded'))\r\n            dispatch(setTodoListObjectStatusAC(todoId, 'succeeded'))\r\n        } else {\r\n            handleServerAppError(data, dispatch)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n\r\n}\r\nexport const addTodoListTC = (title: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setLoadingStatusAC('loading'))\r\n    try {\r\n        let {data} = await todoListAPI.createTodoList(title)\r\n        if (data.resultCode === 0) {\r\n            dispatch(addTodolistAC(data.data.item))\r\n            dispatch(setLoadingStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(data, dispatch)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}\r\nexport const updateTodoListTC = (todoId: string, title: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setLoadingStatusAC('loading'))\r\n    dispatch(setTodoListObjectStatusAC(todoId, 'loading'))\r\n    try {\r\n        let {data} = await todoListAPI.updateTodoList(todoId, title)\r\n        if (data.resultCode === 0) {\r\n            dispatch(changeTodolistTitleAC(todoId, title))\r\n            dispatch(setLoadingStatusAC('succeeded'))\r\n            dispatch(setTodoListObjectStatusAC(todoId, 'succeeded'))\r\n        } else {\r\n            handleServerAppError(data, dispatch)\r\n        }\r\n    } catch (e) {\r\n        handleServerNetworkError(e, dispatch)\r\n    }\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport {Grid, Paper} from '@material-ui/core';\r\nimport {AddItemForm} from '../AddItemForm/AddItemForm';\r\nimport {TodoList} from '../Todolist/Todolist';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {addTodoListTC, getTodoListsTC} from '../../redux/reducers/todoListReducer/todolist-thunk';\r\nimport {RootStoreType} from '../../redux/store';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype TodoListsListPropsType = {\r\n    demo: boolean\r\n}\r\n\r\nconst TodoListsList = ({demo}: TodoListsListPropsType) => {\r\n    const dispatch = useDispatch()\r\n    const todoLists = useSelector((state: RootStoreType) => state.todoLists)\r\n    const tasks = useSelector((state: RootStoreType) => state.tasks )\r\n    const {isLogged} = useSelector((state: RootStoreType) => state.auth )\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLogged) {\r\n            return\r\n        }\r\n        dispatch(getTodoListsTC())\r\n    }, [dispatch, demo, isLogged])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodoListTC(title))\r\n    }, [dispatch])\r\n\r\n    if (!isLogged) {\r\n        return <Redirect to={'login'} />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '30px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container>\r\n                {\r\n                    todoLists.map(tl => {\r\n                        let tasksForTodolist = tasks[tl.id];\r\n\r\n                        return <Grid key={`grid/${tl.id}`} style={{marginRight: '35px', marginBottom: '35px'}} item>\r\n                            <Paper key={`paper/${tl.id}`} style={{padding: '10px'}}>\r\n                                <TodoList\r\n                                    objectStatus={tl.objectStatus}\r\n                                    key={tl.id}\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={tasksForTodolist}\r\n                                    filter={tl.filter}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoListsList;","import React from 'react';\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Grid,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport * as Yup from 'yup';\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {setLoginTC} from '../../redux/reducers/authReducer/auth-actions';\r\nimport {RootStoreType} from '../../redux/store';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nconst Login = () => {\r\n    const {isLogged} = useSelector((state: RootStoreType) => state.auth )\r\n\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string().email('Invalid email address').required('Required'),\r\n            password: Yup.string().min(2, 'Password must be 2 characters or more').required('Required')\r\n        }),\r\n        onSubmit: values => {\r\n            dispatch(setLoginTC(values))\r\n            formik.resetForm()\r\n        }\r\n    })\r\n\r\n    if (isLogged) {\r\n        return <Redirect to={'/'} />\r\n    }\r\n\r\n    return (\r\n        <Grid container alignItems={'center'} justify={'center'}>\r\n            <Grid item>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here</a>\r\n                        </p>\r\n                        <p>or using test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                                error={formik.touched.email && Boolean(formik.errors.email)}\r\n                                helperText={formik.touched.email && formik.errors.email}\r\n                            />\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                error={formik.touched.password && Boolean(formik.errors.password)}\r\n                                helperText={formik.touched.password && formik.errors.password}\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox/>}\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                        </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Login;","import React, {useEffect} from 'react';\r\nimport {\r\n    AppBar, Button, CircularProgress, Container, IconButton,\r\n    LinearProgress, Toolbar, Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {RootStoreType} from './redux/store';\r\nimport {AppReducerStateType} from './redux/reducers/appReducer/app-reducer';\r\nimport ErrorSnackbar from './component/ErrorSnackbar/ErrorSnackBar';\r\nimport TodoListsList from './component/TodoListsList/TodoListsList';\r\nimport { Route, Switch, Redirect} from 'react-router-dom';\r\nimport Login from './component/Login/Login';\r\nimport {initializeAppTC} from './redux/reducers/appReducer/app-actions';\r\nimport {setLogOutTC} from './redux/reducers/authReducer/auth-actions';\r\nimport {authReducerStateType} from './redux/reducers/authReducer/auth-reducer';\r\n\r\nfunction App() {\r\n    const {status, isInitialized} = useSelector<RootStoreType, AppReducerStateType>(state => state.app)\r\n    const {isLogged} = useSelector<RootStoreType, authReducerStateType>(state => state.auth)\r\n    const dispatch = useDispatch()\r\n    const demo = false\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    const onLogOut = () => {\r\n        dispatch(setLogOutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{position: 'fixed', top: '30%', width: '100%', textAlign: 'center'}}>\r\n                <CircularProgress />\r\n            </div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ErrorSnackbar />\r\n            <AppBar position={'static'}>\r\n                <Toolbar>\r\n                    <IconButton>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography>\r\n                        News\r\n                    </Typography>\r\n                    {isLogged && <Button onClick={onLogOut} color={'inherit'}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/ToDoList'} render={() => <TodoListsList demo={demo} /> }/>\r\n                    <Route path={'/login'} render={() => <Login /> }/>\r\n                    <Route path={ '/404' } render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {TaskType} from '../../../api/tasksAPI';\r\nimport {TasksActionsType} from './tasks-actions';\r\nimport {RequestStatusType} from '../appReducer/app-reducer';\r\n\r\nexport type ObjectStatusType = TaskType & {\r\n    objectStatus: RequestStatusType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: ObjectStatusType[]\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: TasksActionsType): TasksStateType => {\r\n    let copyState = {...state}\r\n    switch (action.type) {\r\n        case 'SET_TASKS': {\r\n            copyState[action.todoId] = action.tasks.map(el => ({...el, objectStatus: 'idle'}))\r\n            return copyState\r\n        }\r\n        case 'ADD_TASK': {\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [{...action.task, objectStatus: 'idle'}, ...state[action.task.todoListId]]\r\n            }\r\n        }\r\n        case 'REMOVE_TASK': {\r\n            return {\r\n                ...state,\r\n                [action.todoID]: state[action.todoID].filter( t => t.id !== action.id)\r\n            }\r\n        }\r\n        case 'UPDATE_TASK': {\r\n            return {\r\n                ...state,\r\n                [action.todoId]: state[action.todoId]\r\n                    .map(el => el.id === action.id ? {...el, ...action.model} : el)\r\n            }\r\n        }\r\n        case 'ADD_TODOLIST': {\r\n            return {...state, [action.todoList.id]: []}\r\n        }\r\n        case 'REMOVE_TODOLIST': {\r\n            let copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        case 'SET_TODOLISTS': {\r\n            action.todoLists.forEach(el => {\r\n                copyState[el.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET_TASK_OBJECT_STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.todoId]: state[action.todoId].map(el => {\r\n                    return el.id === action.taskId ? {...el, objectStatus: action.status} : el\r\n                })\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}","import {TodoListsActionsType} from './todolist-actions';\r\nimport {TodoListType} from '../../../api/todoAPI';\r\nimport {RequestStatusType} from '../appReducer/app-reducer';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodoListBllType = TodoListType & {\r\n    filter: FilterValuesType\r\n    objectStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: TodoListBllType[] = []\r\n\r\nexport const todoListsReducer = (state: TodoListBllType[] = initialState, action: TodoListsActionsType): TodoListBllType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE_TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD_TODOLIST': {\r\n            return [{...action.todoList,  filter: 'all', objectStatus: 'idle'}, ...state,]\r\n        }\r\n        case 'Change_TODOLIST_TITLE': {\r\n            return state.map(el => (el.id === action.id) ? {...el, title: action.title} : el)\r\n        }\r\n        case 'CHANGE_TODOLIST_FILTER': {\r\n            return state.map(el => (el.id === action.id) ? {...el, filter: action.filter} : el)\r\n        }\r\n        case 'SET_TODOLISTS': {\r\n            return action.todoLists.map( el => ({...el, filter: 'all', objectStatus: 'idle'}) )\r\n        }\r\n        case 'SET_TODOLIST_OBJECT_STATUS': {\r\n            return state.map(el => el.id === action.todoId ? {...el, objectStatus: action.status} : el)\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import {appActionsType, AppReducerActionsType} from './app-actions';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as null | string,\r\n    isInitialized: false\r\n}\r\n\r\nexport type AppReducerStateType = typeof initialState\r\n\r\nexport const appReducer = (state: AppReducerStateType = initialState, action: AppReducerActionsType): AppReducerStateType => {\r\n    switch (action.type) {\r\n        case appActionsType.setLoadingStatus: {\r\n            return { ...state, status: action.status }\r\n        }\r\n        case appActionsType.setError: {\r\n            return { ...state, error: action.error }\r\n        }\r\n        case appActionsType.setIsInitialized: {\r\n            return { ...state, isInitialized: action.value }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import {authActionsType, authReducerActionsType} from './auth-actions';\r\n\r\nconst initialState = {\r\n    isLogged: false\r\n}\r\n\r\nexport type authReducerStateType = typeof initialState\r\n\r\nexport const authReducer = (state: authReducerStateType = initialState, action: authReducerActionsType): authReducerStateType => {\r\n    switch (action.type) {\r\n        case authActionsType.setIsLogged: {\r\n            return {...state, isLogged: action.value}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {tasksReducer} from './reducers/tasksReducer/tasks-reducer';\r\nimport {todoListsReducer} from './reducers/todoListReducer/todolists-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from './reducers/appReducer/app-reducer';\r\nimport {authReducer} from './reducers/authReducer/auth-reducer';\r\n\r\nconst reducers = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk))\r\n\r\nexport type RootStoreType = ReturnType<typeof reducers>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './redux/store';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>\r\n    ,  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}