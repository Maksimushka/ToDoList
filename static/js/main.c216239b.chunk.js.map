{"version":3,"sources":["component/Todolist/Todolist.module.css","App.module.css","component/Todolist/AddItemForm.tsx","component/EditableSpan.tsx","component/Todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","className","s","input","value","onChange","e","currentTarget","onKeyPress","charCode","inputError","inputDefault","onClick","EditableSpan","editMode","setEditMode","inputTask","autoFocus","onBlur","onDoubleClick","TodoList","todolist","typeTasks","spanTitle","newValue","changeTodolistTitle","id","removeTodoList","todolistDelete","addTask","tasks","map","task","isDone","taskDone","checkbox","type","changeStatus","checked","changeTaskTitle","taskButton","removeTask","filter","activeFilter","filterElement","changeFilter","App","todolistID1","v1","todolistID2","todolists","setTodolists","setTasks","todolistID","filteredTasks","t","taskId","find","tl","removedTodolist","newTodolistID","allTodolistTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c216239b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__1dih7\",\"typeTasks\":\"Todolist_typeTasks__3edXx\",\"todolistDelete\":\"Todolist_todolistDelete__2Dzb0\",\"tasks\":\"Todolist_tasks__1q6Ld\",\"task\":\"Todolist_task__Bqtzb\",\"taskDone\":\"Todolist_taskDone__3x4fw\",\"checkbox\":\"Todolist_checkbox__3Ho8A\",\"title\":\"Todolist_title__3IfZN\",\"taskButton\":\"Todolist_taskButton__2MhpI\",\"input\":\"Todolist_input__27hUE\",\"error\":\"Todolist_error__3R6NM\",\"inputDefault\":\"Todolist_inputDefault__l77g-\",\"inputError\":\"Todolist_inputError__1xpwb\",\"filter\":\"Todolist_filter__2Ou0P\",\"activeFilter\":\"Todolist_activeFilter__2ktAu\",\"filterElement\":\"Todolist_filterElement__N9z0H\",\"inputTask\":\"Todolist_inputTask__1zpOo\",\"spanTitle\":\"Todolist_spanTitle__2diLC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3rjO2\"};","import s from \"./Todolist.module.css\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<string>(\"\")\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title)\r\n            setTitle(\"\")\r\n            setError(\"\")\r\n        } else {\r\n            setError(\"Please, enter your task!\")\r\n            setTitle(\"\")\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => { setTitle(e.currentTarget.value) }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => { if (e.charCode === 13)  addItem() }\r\n\r\n    return (\r\n        <div className={s.input}>\r\n            <input value={title}\r\n                   onChange={ onChangeHandler }\r\n                   onKeyPress={ onKeyPressHandler }\r\n                   className={ error ? s.inputError : s.inputDefault }\r\n            />\r\n            <button onClick={ addItem }>Add</button>\r\n            { error && <div className={s.error}>{error}</div> }\r\n        </div>\r\n    )\r\n}","import s from \"./Todolist/Todolist.module.css\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype EditableSpatType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpatType) {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(props.value)\r\n\r\n    const activeEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const ChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                className={s.inputTask}\r\n                autoFocus\r\n                onChange={ ChangeTitle }\r\n                value={ title }\r\n                onBlur={ activateViewMode }\r\n            />\r\n            : <span onDoubleClick={ activeEditMode } className={s.title}>{ title }</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from \"../../App\";\r\nimport s from \"./Todolist.module.css\"\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype PropsType = {\r\n    title: string\r\n    id: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistID: string) => void\r\n    removeTodoList: (id: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, todolistID: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string , newValue: string, todolistID: string) => void\r\n    changeTodolistTitle: (newValue: string, id: string) => void\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    const onAllClickHandler = () => { props.changeFilter(\"all\", props.id) }\r\n    const onActiveClickHandler = () => { props.changeFilter(\"active\", props.id) }\r\n    const onCompletedClickHandler = () => { props.changeFilter(\"completed\", props.id) }\r\n    const onRemoveTodolist = () => { props.removeTodoList(props.id) }\r\n    const addTask = (title: string) => { props.addTask(title, props.id) }\r\n    const changeTodolistTitle = (newValue: string) => {\r\n        props.changeTodolistTitle(newValue, props.id)\r\n    }\r\n\r\n    return (\r\n    <div className={s.todolist}>\r\n        <h3 className={s.typeTasks}>\r\n            <span className={s.spanTitle}><EditableSpan value={ props.title } onChange={ changeTodolistTitle } /></span>\r\n            <button onClick={ onRemoveTodolist } className={s.todolistDelete}>x</button>\r\n        </h3>\r\n        <AddItemForm addItem={ addTask }/>\r\n        <div className={s.tasks}>\r\n            { props.tasks.map((task: TaskType) => {\r\n                const onRemoveHandler = () => { props.removeTask(task.id, props.id) }\r\n                const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                    props.changeStatus(task.id, e.currentTarget.checked, props.id)\r\n                }\r\n                const onChangeTaskValueHandler = (newValue: string) => {\r\n                    props.changeTaskTitle(task.id, newValue, props.id)\r\n                }\r\n\r\n                return (\r\n                    <div key={task.id} className={ task.isDone ? s.taskDone : s.task}>\r\n                        <input className={s.checkbox}\r\n                               type=\"checkbox\"\r\n                               onChange={ onChangeStatusHandler }\r\n                               checked={ task.isDone }/>\r\n                        <EditableSpan onChange={ onChangeTaskValueHandler } value={task.title} />\r\n                        <button className={s.taskButton} onClick={ onRemoveHandler }>x</button>\r\n                    </div>\r\n                )\r\n            }) }\r\n        </div>\r\n        <div className={s.filter}>\r\n            <button className={props.filter === \"all\" ? s.activeFilter : s.filterElement} onClick={ onAllClickHandler }>All</button>\r\n            <button className={props.filter === \"active\" ? s.activeFilter : s.filterElement} onClick={ onActiveClickHandler }>Active</button>\r\n            <button className={props.filter === \"completed\" ? s.activeFilter : s.filterElement} onClick={ onCompletedClickHandler }>Completed</button>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport s from './App.module.css';\r\n\r\nimport {v1} from 'uuid';\r\nimport {TaskType, TodoList} from \"./component/Todolist/Todolist\";\r\nimport {AddItemForm} from \"./component/Todolist/AddItemForm\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todolistID1 = v1()\r\n    const todolistID2 = v1()\r\n\r\n    const [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: todolistID1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistID2, title: \"What to buy\", filter: \"all\"},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"Bread\", isDone: false},\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n            {id: v1(), title: \"Meat\", isDone: false},\r\n            {id: v1(), title: \"Vodka\", isDone: true},\r\n        ],\r\n    });\r\n\r\n    function removeTask(id: string, todolistID: string) {\r\n        let filteredTasks = tasks[todolistID].filter(t => t.id !== id);\r\n        if (filteredTasks) {\r\n            tasks[todolistID] = filteredTasks\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n    function addTask(title: string, todolistID: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        tasks[todolistID] = [task, ...tasks[todolistID]]\r\n        setTasks({...tasks});\r\n    }\r\n    function changeStatus(taskId: string, isDone: boolean, todolistID: string) {\r\n        let task = tasks[todolistID].find(t => t.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n    function changeTaskTitle(taskId: string, newValue: string, todolistID: string) {\r\n        let task = tasks[todolistID].find( t => t.id === taskId )\r\n        if (task) {\r\n            task.title = newValue\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n    function changeTodolistTitle(newValue: string, todolistID: string) {\r\n        let todolist = todolists.find( tl => tl.id === todolistID )\r\n        if (todolist) {\r\n            todolist.title = newValue\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n    function changeFilter(value: FilterValuesType, todolistID: string) {\r\n        let todolist = todolists.find( tl => tl.id === todolistID )\r\n        if (todolist) {\r\n            todolist.filter = value\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n    function addTodolist(title: string) {\r\n        let newTodolistID = v1()\r\n        let newTodolist: TodolistsType = { id: newTodolistID, title: title, filter: \"all\"}\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks({ ...tasks, [newTodolistID]: [] })\r\n    }\r\n    function removeTodoList(id: string){\r\n        const removedTodolist = todolists.filter( tl => tl.id !== id)\r\n        if (removedTodolist) {\r\n            setTodolists(removedTodolist)\r\n            delete tasks[id]\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AddItemForm addItem={ addTodolist } />\r\n            <div className={s.App}>\r\n                {\r\n                    todolists.map(tl => {\r\n\r\n                        let allTodolistTasks = tasks[tl.id]\r\n                        if (tl.filter === \"active\") { allTodolistTasks = allTodolistTasks.filter(t => !t.isDone); }\r\n                        if (tl.filter === \"completed\") { allTodolistTasks = allTodolistTasks.filter(t => t.isDone); }\r\n\r\n                        return (\r\n                            <TodoList\r\n                                key={ tl.id }\r\n                                id={ tl.id }\r\n                                title={ tl.title }\r\n                                tasks={ allTodolistTasks }\r\n                                removeTask={ removeTask }\r\n                                removeTodoList={ removeTodoList }\r\n                                changeFilter={ changeFilter }\r\n                                addTask={ addTask }\r\n                                changeStatus={ changeStatus }\r\n                                changeTaskTitle={ changeTaskTitle }\r\n                                changeTodolistTitle={ changeTodolistTitle }\r\n                                filter={ tl.filter }/>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}