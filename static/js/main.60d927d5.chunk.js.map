{"version":3,"sources":["component/Todolist/Todolist.module.css","App.module.css","component/Todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TodoList","props","useState","title","setTitle","error","setError","addTask","trim","id","className","s","todolist","typeTasks","onClick","removeTodoList","todolistDelete","input","value","onChange","e","currentTarget","onKeyPress","charCode","inputError","inputDefault","tasks","map","task","isDone","taskDone","checkbox","type","changeStatus","checked","taskButton","removeTask","filter","activeFilter","filterElement","changeFilter","App","todolistID1","v1","todolistID2","todolists","setTodolists","setTasks","todolistID","filteredTasks","t","taskId","find","tl","removedTodolist","allTodolistTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.60d927d5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist\":\"Todolist_todolist__1dih7\",\"typeTasks\":\"Todolist_typeTasks__3edXx\",\"todolistDelete\":\"Todolist_todolistDelete__2Dzb0\",\"tasks\":\"Todolist_tasks__1q6Ld\",\"task\":\"Todolist_task__Bqtzb\",\"taskDone\":\"Todolist_taskDone__3x4fw\",\"checkbox\":\"Todolist_checkbox__3Ho8A\",\"title\":\"Todolist_title__3IfZN\",\"taskButton\":\"Todolist_taskButton__2MhpI\",\"input\":\"Todolist_input__27hUE\",\"error\":\"Todolist_error__3R6NM\",\"inputDefault\":\"Todolist_inputDefault__l77g-\",\"inputError\":\"Todolist_inputError__1xpwb\",\"filter\":\"Todolist_filter__2Ou0P\",\"activeFilter\":\"Todolist_activeFilter__2ktAu\",\"filterElement\":\"Todolist_filterElement__N9z0H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3rjO2\"};","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType} from \"../../App\";\r\nimport s from \"./Todolist.module.css\"\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype PropsType = {\r\n    title: string\r\n    id: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistID: string) => void\r\n    removeTodoList: (id: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeStatus: (taskId: string, isDone: boolean, todolistID: string) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport function TodoList(props: PropsType) {\r\n\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<string>(\"\")\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addTask(title, props.id)\r\n            setTitle(\"\")\r\n            setError(\"\")\r\n        } else {\r\n            setError(\"Please, enter your task!\")\r\n            setTitle(\"\")\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => { setTitle(e.currentTarget.value) }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => { if (e.charCode === 13)  addTask() }\r\n    const onAllClickHandler = () => { props.changeFilter(\"all\", props.id) }\r\n    const onActiveClickHandler = () => { props.changeFilter(\"active\", props.id) }\r\n    const onCompletedClickHandler = () => { props.changeFilter(\"completed\", props.id) }\r\n    const onRemoveTodolist = () => { props.removeTodoList(props.id) }\r\n\r\n    return (\r\n    <div className={s.todolist}>\r\n        <h3 className={s.typeTasks}>\r\n            {props.title}\r\n            <button onClick={ onRemoveTodolist } className={s.todolistDelete}>x</button>\r\n        </h3>\r\n        <div className={s.input}>\r\n            <input value={title}\r\n                   onChange={ onChangeHandler }\r\n                   onKeyPress={ onKeyPressHandler }\r\n                   className={ error ? s.inputError : s.inputDefault }\r\n            />\r\n            <button onClick={ addTask }>Add</button>\r\n            { error && <div className={s.error}>{error}</div> }\r\n        </div>\r\n        <div className={s.tasks}>\r\n            { props.tasks.map((task: TaskType) => {\r\n                    const onRemoveHandler = () => { props.removeTask(task.id, props.id) }\r\n                    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeStatus(task.id, e.currentTarget.checked, props.id)\r\n                    }\r\n                    return (\r\n                        <div key={task.id} className={ task.isDone ? s.taskDone : s.task}>\r\n                            <input className={s.checkbox}\r\n                                   type=\"checkbox\"\r\n                                   onChange={ onChangeStatusHandler }\r\n                                   checked={ task.isDone }/>\r\n                            <span className={s.title}>{task.title}</span>\r\n                            <button className={s.taskButton} onClick={ onRemoveHandler }>x</button>\r\n                        </div>\r\n                    )\r\n                }) }\r\n        </div>\r\n        <div className={s.filter}>\r\n            <button className={props.filter === \"all\" ? s.activeFilter : s.filterElement} onClick={ onAllClickHandler }>All</button>\r\n            <button className={props.filter === \"active\" ? s.activeFilter : s.filterElement} onClick={ onActiveClickHandler }>Active</button>\r\n            <button className={props.filter === \"completed\" ? s.activeFilter : s.filterElement} onClick={ onCompletedClickHandler }>Completed</button>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport s from './App.module.css';\r\n\r\nimport {v1} from 'uuid';\r\nimport {TaskType, TodoList} from \"./component/Todolist/Todolist\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const todolistID1 = v1()\r\n    const todolistID2 = v1()\r\n\r\n    const [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: todolistID1, title: \"What to learn\", filter: \"all\"},\r\n        {id: todolistID2, title: \"What to buy\", filter: \"all\"},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"Bread\", isDone: false},\r\n            {id: v1(), title: \"Milk\", isDone: false},\r\n            {id: v1(), title: \"Meat\", isDone: false},\r\n            {id: v1(), title: \"Vodka\", isDone: true},\r\n        ],\r\n    });\r\n\r\n    function removeTask(id: string, todolistID: string) {\r\n        let filteredTasks = tasks[todolistID].filter(t => t.id !== id);\r\n        if (filteredTasks) {\r\n            tasks[todolistID] = filteredTasks\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n    function addTask(title: string, todolistID: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        tasks[todolistID] = [task, ...tasks[todolistID]]\r\n        setTasks({...tasks});\r\n    }\r\n    function changeStatus(taskId: string, isDone: boolean, todolistID: string) {\r\n        let task = tasks[todolistID].find(t => t.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n    function changeFilter(value: FilterValuesType, todolistID: string) {\r\n        let todolist = todolists.find( tl => tl.id === todolistID )\r\n        if (todolist) {\r\n            todolist.filter = value\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n    const removeTodoList = (id: string) => {\r\n        const removedTodolist = todolists.filter( tl => tl.id !== id)\r\n        if (removedTodolist) {\r\n            setTodolists(removedTodolist)\r\n            delete tasks[id]\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.App}>\r\n            {\r\n                todolists.map(tl => {\r\n\r\n                    let allTodolistTasks = tasks[tl.id]\r\n                    if (tl.filter === \"active\") { allTodolistTasks = allTodolistTasks.filter(t => !t.isDone); }\r\n                    if (tl.filter === \"completed\") { allTodolistTasks = allTodolistTasks.filter(t => t.isDone); }\r\n\r\n                    return (\r\n                        <TodoList\r\n                            key={ tl.id }\r\n                            id={ tl.id }\r\n                            title={ tl.title }\r\n                            tasks={ allTodolistTasks }\r\n                            removeTask={ removeTask }\r\n                            removeTodoList={ removeTodoList }\r\n                            changeFilter={ changeFilter }\r\n                            addTask={ addTask }\r\n                            changeStatus={ changeStatus }\r\n                            filter={ tl.filter }/>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}