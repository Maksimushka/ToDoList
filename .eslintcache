[{"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\serviceWorker.ts":"1","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\App.tsx":"2","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\component\\Todolist\\Todolist.tsx":"3","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\index.tsx":"4","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\component\\Todolist\\AddItemForm.tsx":"5","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\component\\EditableSpan\\EditableSpan.tsx":"6"},{"size":5295,"mtime":1587586615167,"results":"7","hashOfConfig":"8"},{"size":5748,"mtime":1614097429867,"results":"9","hashOfConfig":"8"},{"size":3742,"mtime":1613490702407,"results":"10","hashOfConfig":"8"},{"size":465,"mtime":1591461812687,"results":"11","hashOfConfig":"8"},{"size":1432,"mtime":1613492252012,"results":"12","hashOfConfig":"8"},{"size":1149,"mtime":1613491045962,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v4tzde",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\serviceWorker.ts",[],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\App.tsx",[],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\component\\Todolist\\Todolist.tsx",[],["29","30"],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\index.tsx",[],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\component\\Todolist\\AddItemForm.tsx",["31"],"import s from \"./Todolist.module.css\";\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n\r\n    let [title, setTitle] = useState<string>(\"\")\r\n    let [error, setError] = useState<string>(\"\")\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title)\r\n            setTitle(\"\")\r\n            setError(\"\")\r\n        } else {\r\n            setError(\"Please, enter your task!\")\r\n            setTitle(\"\")\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => { setTitle(e.currentTarget.value) }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => { if (e.charCode === 13)  addItem() }\r\n\r\n    return (\r\n        <div className={s.input}>\r\n            <TextField\r\n                value={title}\r\n                label={'Type value'}\r\n                variant={'outlined'}\r\n                onChange={ onChangeHandler }\r\n                onKeyPress={ onKeyPressHandler }\r\n                error={ !!error }\r\n                helperText={ error }\r\n            />\r\n            <IconButton color='primary'  onClick={ addItem }>\r\n                <AddBox />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}",["32","33"],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\component\\EditableSpan\\EditableSpan.tsx",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":3,"column":9,"nodeType":"40","messageId":"41","endLine":3,"endColumn":15},{"ruleId":"34","replacedBy":"42"},{"ruleId":"36","replacedBy":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar",["44"],["45"],"no-global-assign","no-unsafe-negation"]