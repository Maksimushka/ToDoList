[{"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\component\\Todolist\\AddItemForm.tsx":"1","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\component\\EditableSpan\\EditableSpan.tsx":"2","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\component\\Task\\Task.tsx":"3","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\redux\\store.ts":"4","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\stories\\decorators\\ProviderDecorator.tsx":"5","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\index.tsx":"6","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\App.tsx":"7","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\component\\Todolist\\Todolist.tsx":"8","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\serviceWorker.ts":"9","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\stories\\tasks-api.stories.tsx":"10","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\api\\tasksAPI.ts":"11","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\api\\todoAPI.ts":"12","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\redux\\reducers\\tasksReducer\\tasks-actions.ts":"13","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\redux\\reducers\\tasksReducer\\tasks-reducer.ts":"14","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\redux\\reducers\\todoListReducer\\todolists-reducer.ts":"15","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\redux\\reducers\\todoListReducer\\todolist-actions.ts":"16","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\redux\\reducers\\todoListReducer\\todolist-thunk.ts":"17","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\redux\\reducers\\tasksReducer\\tasks-thunk.ts":"18"},{"size":1540,"mtime":1617355402328,"results":"19","hashOfConfig":"20"},{"size":1244,"mtime":1617948731570,"results":"21","hashOfConfig":"20"},{"size":1709,"mtime":1617375262183,"results":"22","hashOfConfig":"20"},{"size":481,"mtime":1617897402903,"results":"23","hashOfConfig":"20"},{"size":207,"mtime":1616690464439,"results":"24","hashOfConfig":"25"},{"size":607,"mtime":1617894511768,"results":"26","hashOfConfig":"20"},{"size":4631,"mtime":1617950779537,"results":"27","hashOfConfig":"20"},{"size":3908,"mtime":1617899972058,"results":"28","hashOfConfig":"20"},{"size":5444,"mtime":1617355402346,"results":"29","hashOfConfig":"20"},{"size":1595,"mtime":1617360155088,"results":"30","hashOfConfig":"20"},{"size":1694,"mtime":1617902959884,"results":"31","hashOfConfig":"20"},{"size":1001,"mtime":1617895850716,"results":"32","hashOfConfig":"20"},{"size":1416,"mtime":1617950716155,"results":"33","hashOfConfig":"20"},{"size":2538,"mtime":1617900809581,"results":"34","hashOfConfig":"20"},{"size":1726,"mtime":1617896053950,"results":"35","hashOfConfig":"20"},{"size":1482,"mtime":1617949055787,"results":"36","hashOfConfig":"20"},{"size":941,"mtime":1617948609077,"results":"37","hashOfConfig":"20"},{"size":2138,"mtime":1617903398347,"results":"38","hashOfConfig":"20"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},"zl5xel",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v4tzde",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\component\\Todolist\\AddItemForm.tsx",[],["79","80"],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\component\\EditableSpan\\EditableSpan.tsx",[],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\component\\Task\\Task.tsx",[],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\redux\\store.ts",[],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\stories\\decorators\\ProviderDecorator.tsx",[],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\index.tsx",[],["81","82"],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\App.tsx",[],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\component\\Todolist\\Todolist.tsx",["83"],"import React, {useCallback, useEffect} from 'react';\r\nimport s from './Todolist.module.css'\r\nimport {AddItemForm} from './AddItemForm';\r\nimport EditableSpan from '../EditableSpan/EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {Task} from '../Task/Task';\r\nimport {TaskStatus, TaskType} from '../../api/tasksAPI';\r\nimport {FilterValuesType} from '../../redux/reducers/todoListReducer/todolists-reducer';\r\nimport {getTasksTC} from '../../redux/reducers/tasksReducer/tasks-thunk';\r\nimport {useDispatch} from 'react-redux';\r\n\r\ntype PropsType = {\r\n    title: string\r\n    id: string\r\n    tasks: TaskType[]\r\n    removeTask: (id: string, todolistID: string) => void\r\n    removeTodoList: (id: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistID: string) => void\r\n    addTask: (title: string, todolistID: string) => void\r\n    changeStatus: (taskId: string, status: TaskStatus, todolistID: string) => void\r\n    filter: FilterValuesType\r\n    changeTodolistTitle: (title: string, todolistID: string) => void\r\n    changeTaskTitle: (title: string, taskId: string, todolistID: string) => void\r\n}\r\n\r\nexport const TodoList = React.memo((props: PropsType) => {\r\n    const {\r\n        tasks, title, id, addTask, removeTodoList,\r\n        changeStatus, changeFilter , changeTaskTitle,\r\n        changeTodolistTitle, filter, removeTask\r\n    } = props\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(id))\r\n    }, [])\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter(\"all\", id), [changeFilter, id])\r\n    const onActiveClickHandler = useCallback(() => changeFilter(\"active\", id), [changeFilter, id])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter(\"completed\", id), [changeFilter, id])\r\n    const onRemoveTodolist = () => removeTodoList(id)\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, id)\r\n        }, [addTask, id])\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle(title, id)\r\n    }, [changeTodolistTitle, id])\r\n\r\n\r\n    let tasksForTodolist = tasks;\r\n    if (filter === \"active\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatus.New);\r\n    }\r\n    if (filter === \"completed\") {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatus.Completed);\r\n    }\r\n\r\n    return (\r\n    <div>\r\n        <h3 className={s.typeTasks}>\r\n            <span className={s.spanTitle}>\r\n                <EditableSpan onChange={ changeTodolistTitleHandler } value={ title } />\r\n            </span>\r\n            <IconButton onClick={ onRemoveTodolist } >\r\n                <Delete />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={ addTaskHandler }/>\r\n        <div className={s.tasks}>\r\n            { tasksForTodolist.map((task: TaskType) => {\r\n                return <Task\r\n                    taskId={task.id}\r\n                    title={task.title}\r\n                    status={task.status}\r\n                    todoId={id}\r\n                    changeTaskTitle={changeTaskTitle}\r\n                    changeStatus={changeStatus}\r\n                    removeTask={removeTask}\r\n                    key={task.id}/>\r\n            }) }\r\n        </div>\r\n        <div className={s.filter}>\r\n            <Button variant={filter === \"all\" ? \"outlined\" : \"text\"}\r\n                    onClick={ onAllClickHandler }>All</Button>\r\n            <Button variant={filter === \"active\" ? \"outlined\" : \"text\"}\r\n                    color={'primary'}\r\n                    onClick={ onActiveClickHandler }>Active</Button>\r\n            <Button variant={filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                    color={'secondary'}\r\n                    onClick={ onCompletedClickHandler }>Completed</Button>\r\n        </div>\r\n    </div>\r\n    )\r\n})\r\n\r\n\r\n\r\n","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\serviceWorker.ts",[],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\stories\\tasks-api.stories.tsx",["84"],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\api\\tasksAPI.ts",[],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\api\\todoAPI.ts",[],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\redux\\reducers\\tasksReducer\\tasks-actions.ts",[],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\redux\\reducers\\tasksReducer\\tasks-reducer.ts",["85","86","87"],"import {v1} from 'uuid';\r\nimport {\r\n    AddTaskActionType,\r\n    ChangeTaskStatusActionType,\r\n    ChangeTaskTitleActionType,\r\n    RemoveTaskActionType, SetTasksStatusActionType\r\n} from './tasks-actions';\r\nimport {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType,\r\n    SetTodoListsActionType\r\n} from '../todoListReducer/todolist-actions';\r\nimport {TaskPriority, TaskStatus, TaskType} from '../../../api/tasksAPI';\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType | ChangeTaskTitleActionType\r\n    | ChangeTaskStatusActionType | AddTodolistActionType | RemoveTodolistActionType\r\n    | SetTodoListsActionType | SetTasksStatusActionType\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    let copyState = {...state}\r\n    switch (action.type) {\r\n        case 'SET_TASKS': {\r\n            copyState[action.todoId] = action.tasks\r\n            return copyState\r\n        }\r\n        case 'ADD_TASK': {\r\n            let tasks = copyState[action.task.todoListId]\r\n            copyState[action.task.todoListId] = [action.task, ...tasks]\r\n            return copyState\r\n        }\r\n        case 'REMOVE_TASK': {\r\n            let removedTasks = copyState[action.todoID].filter( t => t.id !== action.id)\r\n            copyState[action.todoID] = removedTasks\r\n            return copyState\r\n        }\r\n        case 'CHANGE_TASK_TITLE': {\r\n            let tasks = copyState[action.todoID]\r\n            let task = tasks.find( t => t.id === action.id)\r\n            task!.title = action.title\r\n            copyState[action.todoID] = [...tasks]\r\n            return copyState\r\n        }\r\n        case 'CHANGE_TASK_STATUS': {\r\n            let todolistTasks = copyState[action.todoID]\r\n            let task = todolistTasks.find( t => t.id === action.id)\r\n            task!.status = action.status\r\n            copyState[action.todoID] = [...todolistTasks]\r\n            return copyState\r\n        }\r\n        case 'ADD_TODOLIST': {\r\n            copyState[action.todoId] = []\r\n            return copyState\r\n        }\r\n        case 'REMOVE_TODOLIST': {\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        case 'SET_TODOLISTS': {\r\n            action.todoLists.forEach(el => {\r\n                copyState[el.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n}","C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\redux\\reducers\\todoListReducer\\todolists-reducer.ts",[],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\redux\\reducers\\todoListReducer\\todolist-actions.ts",["88"],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\redux\\reducers\\todoListReducer\\todolist-thunk.ts",[],"C:\\Frontend\\React\\main\\TodoList\\my-app\\src\\redux\\reducers\\tasksReducer\\tasks-thunk.ts",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"89","replacedBy":"93"},{"ruleId":"91","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":36,"column":8,"nodeType":"97","endLine":36,"endColumn":10,"suggestions":"98"},{"ruleId":"99","severity":1,"message":"100","line":4,"column":1,"nodeType":"101","endLine":6,"endColumn":2},{"ruleId":"102","severity":1,"message":"103","line":1,"column":9,"nodeType":"104","messageId":"105","endLine":1,"endColumn":11},{"ruleId":"102","severity":1,"message":"106","line":13,"column":9,"nodeType":"104","messageId":"105","endLine":13,"endColumn":21},{"ruleId":"102","severity":1,"message":"107","line":13,"column":23,"nodeType":"104","messageId":"105","endLine":13,"endColumn":33},{"ruleId":"102","severity":1,"message":"108","line":2,"column":27,"nodeType":"104","messageId":"105","endLine":2,"endColumn":42},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],["109"],["110"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["111"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'v1' is defined but never used.","Identifier","unusedVar","'TaskPriority' is defined but never used.","'TaskStatus' is defined but never used.","'TodoListBllType' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},"Update the dependencies array to be: [dispatch, id]",{"range":"114","text":"115"},[1521,1523],"[dispatch, id]"]